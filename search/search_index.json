{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kilroy-module-server-py-sdk \ud83d\udd17 SDK for kilroy module servers in Python \ud83e\uddf0 Installing \ud83d\udd17 Using pip : pip install kilroy-module-server-py-sdk Usage \ud83d\udd17 from pathlib import Path from kilroy_module_server_py_sdk import Module , ModuleService , ModuleServer class MyModule ( Module ): ... # Implement all necessary methods here module = await MyModule . build () service = ModuleService ( module , Path ( \"path/to/state/directory\" )) server = ModuleServer ( service ) await server . run ( host = \"0.0.0.0\" , port = 11000 )","title":"Home"},{"location":"#kilroy-module-server-py-sdk","text":"SDK for kilroy module servers in Python \ud83e\uddf0","title":"kilroy-module-server-py-sdk"},{"location":"#installing","text":"Using pip : pip install kilroy-module-server-py-sdk","title":"Installing"},{"location":"#usage","text":"from pathlib import Path from kilroy_module_server_py_sdk import Module , ModuleService , ModuleServer class MyModule ( Module ): ... # Implement all necessary methods here module = await MyModule . build () service = ModuleService ( module , Path ( \"path/to/state/directory\" )) server = ModuleServer ( service ) await server . run ( host = \"0.0.0.0\" , port = 11000 )","title":"Usage"},{"location":"usage/","text":"Usage \ud83d\udd17 You can use this package to easily create a module server that complies with the kilroy module API. The easiest way to do this is to create a class that inherits from Module class and implement all the necessary methods. All methods are either simple coroutines or async generators. Here is an example: from pathlib import Path from kilroy_module_server_py_sdk import Module , ModuleService , ModuleServer class MyModule ( Module ): ... # Implement all necessary methods here module = await MyModule . build () service = ModuleService ( module , Path ( \"path/to/state/directory\" )) server = ModuleServer ( service ) await server . run ( host = \"0.0.0.0\" , port = 11000 )","title":"Usage"},{"location":"usage/#usage","text":"You can use this package to easily create a module server that complies with the kilroy module API. The easiest way to do this is to create a class that inherits from Module class and implement all the necessary methods. All methods are either simple coroutines or async generators. Here is an example: from pathlib import Path from kilroy_module_server_py_sdk import Module , ModuleService , ModuleServer class MyModule ( Module ): ... # Implement all necessary methods here module = await MyModule . build () service = ModuleService ( module , Path ( \"path/to/state/directory\" )) server = ModuleServer ( service ) await server . run ( host = \"0.0.0.0\" , port = 11000 )","title":"Usage"}]}